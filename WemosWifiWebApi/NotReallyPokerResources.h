const PROGMEM char notreallypoker_html[] = {"<html> <meta charset='UTF-8'> <head> <link rel='icon' type='image/png' sizes='32x32' href='favicon.png' /> <link rel='stylesheet' href='notreallypoker/style.css' type='text/css' /> <script type='text/javascript' src='notreallypoker/common.js'></script> </head> <body> <div class='content'> <h2 class='tableName'>Not Really Poker</h2> <div id='loginContainer'> <form target='/'> <label for='table'>Player Name: </label><input id='inputTable' name='table' /> <label for='player'>Table Name: </label><input id='inputPlayer' name='player' /><br /> <button type='button' onclick='javascript:sendLogin(true)'>Enter as player</button> <button type='button' onclick='javascript:sendLogin(false)'>Enter as expectator</button> <div id='loginError'></div> </form> </div> <div id='gameContainer'> <div id='tableName'> <h1 class='tableName'>This Table</h1> </div> <div class='tableContainer'> <div id='tableCardsContainer'> </div> <div class='table'> <button id='btnRevealCards' class='tableButton' value='Reveal Cards' onclick='javascript:clickCardRevelation()'></button> <button id='btnNewGame' class='tableButton' value='New Game' disabled='disabled' onclick='javascript:clickGameReset()'></button> </div> </div> <div id='playerCards'> <div id='playerCardsContainer'> </div> </div> <div id='staticsContainer'> TODO: Calculate and fill-in the statics. </div> </div> </div> <div id='errorLayer'> <div class='ErrorSquare'>Error...</div> <div class='ErrorSquare'><button onclick='javascript:showError(false)'>Accept Error and reload page</button></div> </div> <div id='loadingLayer'> <div class='loadingCircle rotate'>Loading...</div> </div> </body> </html>"};
const PROGMEM char notreallypoker_js[] = {"let connection,loginContainer,gameContainer,loadingLayer,errorLayer,playerCards,playerCardsContainer,tableCardsContainer,staticsContainer,btnNewGame,btnRevealCards,isConnected=!1,myId=0,allPlayers=new Array,areCardsRevealed=!1,isRevealCardsSent=!1,isExpectator=!1,loadingStack=0;function switchScreen(e){if(e){const e=new URLSearchParams(window.location.search),a=document.getElementById('inputTable'),t=document.getElementById('inputPlayer');a.value=e.get('table'),t.value=e.get('player'),loginContainer.style.display='block',gameContainer.style.display='none'}else loginContainer.style.display='none',gameContainer.style.display='block',isExpectator||(switchBottomPanel(null,playerCards),setTimeout(generateAndShowPlayerCards,410))}function showLoading(e){loadingStack+=e?1:-1,e?loadingLayer.style.display='block':loadingStack<=0&&(loadingStack=0,loadingLayer.style.display='none')}function showError(e){!1===e?(errorLayer.style.display='none',location.reload()):(errorLayer.style.display='block',errorLayer.firstElementChild.textContent=e)}function showLoginError(e){document.getElementById('loginError').textContent=e}function webSocketConect(){showLoading(!0),connection=new WebSocket('ws:192.168.1.186:81',['arduino']),connection.onerror=function(e){showError(`Error: ${e}`),isConnected=!1,console.log('WebSocket Error, ERROR!!! WHY?!?! ',e)},connection.onclose=function(){switchScreen(!0),myId=-1,isConnected=!1,showLoading(!1),console.log('Connection closed'),setTimeout((()=>showError('Connection lost.')),500)},connection.onmessage=function(e){!function(e){console.log('MESSAGE: '+e.data),showLoading(!1);let a=JSON.parse(e.data);if(void 0!==a.yourId)console.log('Connection open. Id: '+myId),isConnected=!0,myId=a.yourId;else if(void 0!==a.disconnectedId)playerDisconnected(a.disconnectedId);else if(void 0!==a.connectedId)a.connectedId!=myId&&playerConnected(a.connectedId,a.name);else if(void 0!==a.a){switch(a.a){case 1:void 0!==a.tp?(switchScreen(!1),allPlayers=new Array,a.tp.forEach(((e,a,t)=>{allPlayers.push({id:e.id,name:e.n,card:void 0!==e.c?e.c:0})}))):void 0!==a.n&&a.id!=myId&&allPlayers.push({id:a.id,name:a.n,card:void 0!==a.c?a.c:0}),RearangeTableCards();break;case 2:a.id==myId?playerCardSelected(a.c):tableCardSelected(a.id,a.c);break;case 3:void 0!==a.tc&&(a.tc.forEach(((e,a,t)=>{const n=allPlayers.find((a=>a.id===e.id));n&&(n.card=e.c)})),receivedRevealTableCards());break;case 4:receivedResetGame()}}else if(void 0!==a.e&&a.e>0){let e='Unexpected Error.';switch(a.e){case 1:e='Player name is already present in the table';break;case 2:e='Player already in another table or all slots are full.';break;case 30:e='The process to choose a card failed.';break;case 31:e='The process to reset players cards failed.';break;case 104:case 105:e='Invalid data was sent.'}a.e<10?showLoginError(e):showError(e)}}(e)}}function sendJson(e,a=!1){a&&showLoading(!0);let t=JSON.stringify(e);console.log('SendingMessage: '+t),connection.send(t)}function sendLogin(e){if(void 0===inputTable.value||void 0===inputPlayer.value||0==inputTable.value.length||0==inputPlayer.value.length)return void showLoginError('Both table and user must be introduced.');if(inputTable.value.length>10||inputPlayer.value.length>105)return void showLoginError('Player and table name must be 10 characters or shorter.');isExpectator=!e,document.getElementById('tableName').firstElementChild.textContent=inputTable.value,sendJson({action:1,table:inputTable.value,player:inputPlayer.value,expectator:!e},!0)}function sendCardSelected(e){sendJson({action:2,cardNumber:e})}function sendRevealCards(){sendJson({action:3})}function sendGameReset(){sendJson({action:4})}function clickCardRevelation(){btnRevealCards.classList.contains('btnConfirmation')?(btnRevealCards.classList.remove('btnConfirmation'),btnRevealCards.setAttribute('disabled','disabled'),btnRevealCards.style.display='none',sendRevealCards(),isRevealCardsSent=!0):(btnRevealCards.classList.add('btnConfirmation'),setTimeout((()=>{btnRevealCards.classList.remove('btnConfirmation')}),1100))}function clickGameReset(){btnNewGame.classList.contains('btnConfirmation')?(btnNewGame.classList.remove('btnConfirmation'),btnNewGame.setAttribute('disabled','disabled'),btnNewGame.style.display='none',sendGameReset()):(btnNewGame.classList.add('btnConfirmation'),setTimeout((()=>{btnNewGame.classList.remove('btnConfirmation')}),1100))}function receivedResetGame(){isRevealCardsSent=!1,areCardsRevealed=!1,btnNewGame.style.display='none',btnRevealCards.style.display='block',btnRevealCards.removeAttribute('disabled'),allPlayers.forEach((e=>{e.card>0&&(e.card=0)})),switchBottomPanel(staticsContainer,isExpectator?null:playerCards),RearangeTableCards(),setTimeout(generateAndShowPlayerCards,410)}function receivedRevealTableCards(){areCardsRevealed||(areCardsRevealed=!0,btnRevealCards.style.display='block',btnNewGame.style.display='none',btnRevealCards.removeAttribute('disabled'),btnRevealCards.style.display='none',btnNewGame.style.display='block',btnNewGame.removeAttribute('disabled'),switchBottomPanel(isExpectator?null:playerCards,staticsContainer),RearangeTableCards())}function switchBottomPanel(e,a){null!=e&&(e.style.opacity=0,e.style.bottom='-100px',setTimeout((()=>{e.style.display='none'}),500)),null!=a&&setTimeout((()=>{a.style.display='block',setTimeout((()=>{a.style.bottom='100px',a.style.opacity=1}),1)}),400)}function playerDisconnected(e){RemoveTableCard(e),allPlayers=allPlayers.filter((a=>a.id!=e)),RearangeTableCards()}function playerConnected(e,a){const t={id:e,name:a,card:0};allPlayers.push(t),AddOrGetTableCard(t),RearangeTableCards()}function AddOrGetTableCard(e){let a=`tableCard${e.id}`,t=document.getElementById(a);if(!t){t=document.createElement('div'),t.id=a,t.classList.add('tableCard'),t.style.opacity=0,setTimeout((()=>t.style.opacity=1),50);const n=document.createElement('div');n.className='tableCardLabel',n.textContent=e.name,t.appendChild(n);const r=document.createElement('div');r.className='tableCardBg',t.appendChild(r);const d=document.createElement('div');d.id=`tableCardNumber${e.id}`,d.className='tableCardNumber',-1===e.card&&(t.classList.add('tableCardObserver'),d.innerHTML='&#128374;'),r.appendChild(d),tableCardsContainer.appendChild(t)}return t}function setTableCardNumber(e,a){let t=document.getElementById(`tableCardNumber${e}`);0===a?t.innerHTML=areCardsRevealed?'&#10060;':'&#8987;':a>0&&(areCardsRevealed?setTimeout((()=>{t.innerHTML=1e3===a?'&#9749':1001===a?'&#10068':a}),200):t.innerHTML='')}function RemoveTableCard(e){const a=document.getElementById(`tableCard${e}`);a&&(a.style.opacity=0,a.id=`${a.id}toDelete${Math.random()}`,setTimeout((()=>a.remove()),500))}function RearangeTableCards(){allPlayers.forEach(((e,a,t)=>{const n=AddOrGetTableCard(e);setTableCardNumber(e.id,e.card);const r=(a*(360/allPlayers.length)-90)*(Math.PI/180),d=160*Math.cos(r)+50,l=160*Math.sin(r)+50;n.style.transform=`translate(-50%, -50%) translate(${d-50}px, ${l+60}px)`;const o=n.classList.contains('tableCardShown');n.classList.remove('tableCardShown'),n.classList.remove('tableCardShowning'),n.classList.remove('tableCardHidden'),n.classList.remove('tableCardNotSelected'),0===e.card?n.classList.add('tableCardNotSelected'):e.card>0&&(areCardsRevealed?o?n.classList.add('tableCardShown'):(n.classList.add('tableCardHidden'),n.classList.add('tableCardShowning'),setTimeout((()=>{n.classList.add('tableCardShown'),n.classList.remove('tableCardHidden')}),200)):n.classList.add('tableCardHidden'))}))}function tableCardSelected(e,a){const t=allPlayers.find((a=>a.id===e));t&&(t.card=a),RearangeTableCards()}function playerCardSelected(e){for(const a of playerCardsContainer.children)a.classList.remove('playerCardLoading'),a.getAttribute('number')==e?a.classList.add('playerCardSelected'):a.classList.remove('playerCardSelected');tableCardSelected(myId,e)}function addPlayerCard(e,a,t=0,n=1){const r=document.createElement('div');r.id=`playerCard${a}`,r.classList.add('playerCard'),r.classList.add('playerCardHidden'),r.setAttribute('number',a),r.onclick=function(){isRevealCardsSent||(r.classList.add('playerCardLoading'),sendCardSelected(a))},r.style.marginRight='-40px';const d=document.createElement('div');d.className='playerCardBg',r.appendChild(d);const l=document.createElement('div');l.id=`playerCardNumber${a}`,l.className='playerCardNumber',d.appendChild(l),playerCardsContainer.appendChild(r),setTimeout((()=>{r.style.marginRight='5px'}),500+50*t),setTimeout((()=>{r.classList.add('playerCardShowing'),setTimeout((()=>{l.innerHTML=e,r.classList.add('playerCardShown')}),200)}),700+50*t+50*n)}function fibonacci(e){return e<=1?e:fibonacci(e-1)+fibonacci(e-2)}function generateAndShowPlayerCards(){if(!isExpectator){console.log('generateAndShowPlayerCards'),playerCardsContainer.innerHTML='';const e=12;playerCardsContainer.style.minWidth=Math.min(window.innerWidth,47*e);for(let a=2;a<=e-1;a++){const t=fibonacci(a);addPlayerCard(t,t,a-1,e)}addPlayerCard('&#9749;',1e3,10,e),addPlayerCard('&#10068;',1001,11,e)}}window.onload=function(){console.log('Windowd Loaded'),loginContainer=document.getElementById('loginContainer'),gameContainer=document.getElementById('gameContainer'),tableCardsContainer=document.getElementById('tableCardsContainer'),playerCards=document.getElementById('playerCards'),playerCardsContainer=document.getElementById('playerCardsContainer'),staticsContainer=document.getElementById('staticsContainer'),btnNewGame=document.getElementById('btnNewGame'),btnRevealCards=document.getElementById('btnRevealCards'),loadingLayer=document.getElementById('loadingLayer'),errorLayer=document.getElementById('errorLayer'),switchScreen(!0),RearangeTableCards(),webSocketConect()};"};
const PROGMEM char notreallypoker_css[] = {"body { font-family: 'Arial'; } .content {} #gameContainer { display: block; } #loginContainer { display: none; width: 400px; height: 250px; margin: auto; border: black solid 1px; } .tableName { display: block; border: black solid 1px; text-align: center; } .tableContainer { width: 200px; position: relative; text-align: center; margin: auto; margin-top: 90px; } .table { overflow: hidden; margin: auto; width: 200px; height: 200px; display: inline-block; } #btnNewGame, #btnRevealCards { font-size: 1.9em; } #btnRevealCards::after { content: 'Reveal Cards'; } #btnNewGame::after { content: 'New votation'; } #btnRevealCards.btnConfirmation::after, #btnNewGame.btnConfirmation::after { content: 'Confirm?'; } .btnConfirmation {} .tableButton { display: block; width: 100%; height: 100%; border-radius: 50%; border: solid 5px; color: white; font-size: 2em; border-color: rgb(82, 131, 255); background-color: rgb(104, 147, 255); } .btnConfirmation { background-color: rgb(56, 165, 17); border-color: rgb(93, 182, 60); animation: color-change-confirmationButton 1s ease-out 500ms both; } @keyframes color-change-confirmationButton { 0% { background-color: rgb(56, 165, 17); border-color: rgb(93, 182, 60); } 100% { background-color: rgb(104, 147, 255); border-color: rgb(82, 131, 255); } } #tableCardsContainer { position: relative; display: block; } #loadingLayer, #errorLayer { top: 0; left: 0; display: none; position: absolute; width: 100%; height: 100%; background-color: #000a; z-index: 1000; } .loadingCircle { width: 100px; height: 100px; margin: auto; margin-top: 200px; border-radius: 50px; background-color: rgb(59, 126, 226); text-align: center; line-height: 90px; color: white; } #errorLayer { background-color: #f00a; } .ErrorSquare { width: 400px; margin: auto; margin-top: 200px; border-radius: 20px; background-color: rgb(126, 28, 28); text-align: center; padding: 30px; font-size: 2em; color: white; } .rotate { animation: rotation 750ms infinite linear; } @keyframes rotation { 0% { transform: rotate(0deg); } 100% { transform: rotate(359deg); } } #playerCards, #staticsContainer { position: fixed; width: 99%; text-align: center; display: none; opacity: 0; bottom: -200px; transition: all 0.25s linear; } #playerCardsContainer { text-align: left; display: inline-block; position: relative; margin: auto; padding: 20px; } .playerCard, .tableCard { width: 35px; height: 58px; margin: 3px; text-align: center; vertical-align: middle; line-height: 58px; transition: all 0.25s ease-out; font-size: 1.2em; user-select: none; } .playerCard { display: inline-block; cursor: pointer; margin: 6px; } .tableCard { margin: auto; position: absolute; top: 50%; left: 50%; z-index: 10; background: none; } .tableCardBg, .playerCardBg { text-align: center; margin: -1 0 0 -1; border: solid 2px rgb(65, 111, 251); border-width: 2px; border-radius: 10px; background-color: white; height: 58px; width: 35px; } .playerCardBg { transition: 'all' 0.25s ease-out; } .tableCardObserver .tableCardBg { border-color: gray; border-style: dashed; background-color: rgb(217, 217, 217); } .tableCardNotSelected .tableCardBg { border: none; padding: 0; margin: 0; background-color: rgb(217, 217, 217); background-image: url('cardDesign.png'); background-size: 100%; background-blend-mode: lighten; } .tableCardHidden .tableCardBg { background-color: rgb(162, 214, 254); background-image: url('cardDesign.png'); background-size: 100%; background-blend-mode: lighten; } .tableCardLabel { width: 90px; left: -30px; top: -1.1em; text-align: center; margin: auto; position: absolute; line-height: 1em; } .playerCardLoading { margin-top: 5px; margin-bottom: -5px; } .playerCardLoading .playerCardBg { box-shadow: 0 0 3px 1px gray; } .playerCardSelected { margin-top: -20px; } .playerCardSelected .playerCardBg { box-shadow: 0 5px 5px 3px gray; } .playerCardHidden .playerCardBg { background-color: rgb(162, 214, 254); background-image: url('cardDesign.png'); background-size: 100%; background-blend-mode: lighten; z-index: 3; } .playerCardShowing .playerCardBg { animation: flip-vertical-right 0.4s cubic-bezier(0.455, 0.030, 0.515, 0.955) both; z-index: 2; } .playerCardShown .playerCardBg { background: white; z-index: 1; } .tableCardNotSelected .tableCardNumber { font-size: 1.2em; color: transparent; text-shadow: 0 0 0 rgb(171, 171, 171); } .tableCardObserver .tableCardNumber { font-size: 1.6em; color: transparent; text-shadow: 0 0 0 rgb(171, 171, 171); } .tableCardShowning .tableCardBg { animation: flip-vertical-right 0.4s cubic-bezier(0.455, 0.030, 0.515, 0.955) both; } @keyframes flip-vertical-right { 0% { transform: rotateY(180deg); } 100% { transform: rotateY(0); } }"};